/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Director class implementing DirectorInterface
var Director = /** @class */ (function () {
    function Director() {
    }
    Director.prototype.workFromHome = function () {
        return "Working from home";
    };
    Director.prototype.getCoffeeBreak = function () {
        return "Getting a coffee break";
    };
    Director.prototype.workDirectorTasks = function () {
        return "Getting to director tasks";
    };
    return Director;
}());
// Teacher class implementing TeacherInterface
var Teacher = /** @class */ (function () {
    function Teacher() {
    }
    Teacher.prototype.workFromHome = function () {
        return "Cannot work from home";
    };
    Teacher.prototype.getCoffeeBreak = function () {
        return "Cannot have a break";
    };
    Teacher.prototype.workTeacherTasks = function () {
        return "Getting to work";
    };
    return Teacher;
}());
// createEmployee function that returns Director or Teacher based on salary
function createEmployee(salary) {
    if (typeof salary === "number" && salary < 500) {
        return new Teacher();
    }
    return new Director();
}
// Task 6: Creating functions specific to employees
// Type predicate function to check if employee is a Director
function isDirector(employee) {
    return employee instanceof Director;
}
// Function that executes work based on employee type
function executeWork(employee) {
    if (isDirector(employee)) {
        return employee.workDirectorTasks();
    }
    else {
        return employee.workTeacherTasks();
    }
}
// Testing examples as specified in the requirements
console.log(createEmployee(200)); // Should return Teacher instance
console.log(createEmployee(1000)); // Should return Director instance
console.log(createEmployee('$500')); // Should return Director instance
// Additional examples to demonstrate the methods
var teacher = createEmployee(200);
console.log(teacher.workFromHome()); // "Cannot work from home"
console.log(teacher.getCoffeeBreak()); // "Cannot have a break"
console.log(teacher.workTeacherTasks()); // "Getting to work"
var director = createEmployee(1000);
console.log(director.workFromHome()); // "Working from home"
console.log(director.getCoffeeBreak()); // "Getting a coffee break"
console.log(director.workDirectorTasks()); // "Getting to director tasks"
// Task 6: Testing the new functions
console.log(executeWork(createEmployee(200))); // "Getting to work"
console.log(executeWork(createEmployee(1000))); // "Getting to director tasks" 

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQWNBLGdEQUFnRDtBQUNoRDtJQUFBO0lBWUEsQ0FBQztJQVhDLCtCQUFZLEdBQVo7UUFDRSxPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRCxpQ0FBYyxHQUFkO1FBQ0UsT0FBTyx3QkFBd0IsQ0FBQztJQUNsQyxDQUFDO0lBRUQsb0NBQWlCLEdBQWpCO1FBQ0UsT0FBTywyQkFBMkIsQ0FBQztJQUNyQyxDQUFDO0lBQ0gsZUFBQztBQUFELENBQUM7QUFFRCw4Q0FBOEM7QUFDOUM7SUFBQTtJQVlBLENBQUM7SUFYQyw4QkFBWSxHQUFaO1FBQ0UsT0FBTyx1QkFBdUIsQ0FBQztJQUNqQyxDQUFDO0lBRUQsZ0NBQWMsR0FBZDtRQUNFLE9BQU8scUJBQXFCLENBQUM7SUFDL0IsQ0FBQztJQUVELGtDQUFnQixHQUFoQjtRQUNFLE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDO0FBRUQsMkVBQTJFO0FBQzNFLFNBQVMsY0FBYyxDQUFDLE1BQXVCO0lBQzdDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sR0FBRyxHQUFHLEVBQUU7UUFDOUMsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBQ3hCLENBQUM7QUFFRCxtREFBbUQ7QUFFbkQsNkRBQTZEO0FBQzdELFNBQVMsVUFBVSxDQUFDLFFBQTRCO0lBQzlDLE9BQU8sUUFBUSxZQUFZLFFBQVEsQ0FBQztBQUN0QyxDQUFDO0FBRUQscURBQXFEO0FBQ3JELFNBQVMsV0FBVyxDQUFDLFFBQTRCO0lBQy9DLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUM7S0FDckM7U0FBTTtRQUNMLE9BQU8sUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUM7S0FDcEM7QUFDSCxDQUFDO0FBRUQsb0RBQW9EO0FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBRSxpQ0FBaUM7QUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGtDQUFrQztBQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsa0NBQWtDO0FBRXZFLGlEQUFpRDtBQUNqRCxJQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFZLENBQUM7QUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFLLDBCQUEwQjtBQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUcsd0JBQXdCO0FBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtBQUU3RCxJQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFhLENBQUM7QUFDbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFNLHNCQUFzQjtBQUNqRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUksMkJBQTJCO0FBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLDhCQUE4QjtBQUV6RSxvQ0FBb0M7QUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFLG9CQUFvQjtBQUNwRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHlwZXNjcmlwdF9kZXBlbmRlbmNpZXMvLi9qcy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERpcmVjdG9ySW50ZXJmYWNlIHdpdGggMyBleHBlY3RlZCBtZXRob2RzXG5pbnRlcmZhY2UgRGlyZWN0b3JJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nO1xuICBnZXRDb2ZmZWVCcmVhaygpOiBzdHJpbmc7XG4gIHdvcmtEaXJlY3RvclRhc2tzKCk6IHN0cmluZztcbn1cblxuLy8gVGVhY2hlckludGVyZmFjZSB3aXRoIDMgZXhwZWN0ZWQgbWV0aG9kc1xuaW50ZXJmYWNlIFRlYWNoZXJJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nO1xuICBnZXRDb2ZmZWVCcmVhaygpOiBzdHJpbmc7XG4gIHdvcmtUZWFjaGVyVGFza3MoKTogc3RyaW5nO1xufVxuXG4vLyBEaXJlY3RvciBjbGFzcyBpbXBsZW1lbnRpbmcgRGlyZWN0b3JJbnRlcmZhY2VcbmNsYXNzIERpcmVjdG9yIGltcGxlbWVudHMgRGlyZWN0b3JJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJXb3JraW5nIGZyb20gaG9tZVwiO1xuICB9XG5cbiAgZ2V0Q29mZmVlQnJlYWsoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJHZXR0aW5nIGEgY29mZmVlIGJyZWFrXCI7XG4gIH1cblxuICB3b3JrRGlyZWN0b3JUYXNrcygpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkdldHRpbmcgdG8gZGlyZWN0b3IgdGFza3NcIjtcbiAgfVxufVxuXG4vLyBUZWFjaGVyIGNsYXNzIGltcGxlbWVudGluZyBUZWFjaGVySW50ZXJmYWNlXG5jbGFzcyBUZWFjaGVyIGltcGxlbWVudHMgVGVhY2hlckludGVyZmFjZSB7XG4gIHdvcmtGcm9tSG9tZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkNhbm5vdCB3b3JrIGZyb20gaG9tZVwiO1xuICB9XG5cbiAgZ2V0Q29mZmVlQnJlYWsoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJDYW5ub3QgaGF2ZSBhIGJyZWFrXCI7XG4gIH1cblxuICB3b3JrVGVhY2hlclRhc2tzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiR2V0dGluZyB0byB3b3JrXCI7XG4gIH1cbn1cblxuLy8gY3JlYXRlRW1wbG95ZWUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIERpcmVjdG9yIG9yIFRlYWNoZXIgYmFzZWQgb24gc2FsYXJ5XG5mdW5jdGlvbiBjcmVhdGVFbXBsb3llZShzYWxhcnk6IG51bWJlciB8IHN0cmluZyk6IERpcmVjdG9yIHwgVGVhY2hlciB7XG4gIGlmICh0eXBlb2Ygc2FsYXJ5ID09PSBcIm51bWJlclwiICYmIHNhbGFyeSA8IDUwMCkge1xuICAgIHJldHVybiBuZXcgVGVhY2hlcigpO1xuICB9XG4gIHJldHVybiBuZXcgRGlyZWN0b3IoKTtcbn1cblxuLy8gVGFzayA2OiBDcmVhdGluZyBmdW5jdGlvbnMgc3BlY2lmaWMgdG8gZW1wbG95ZWVzXG5cbi8vIFR5cGUgcHJlZGljYXRlIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGVtcGxveWVlIGlzIGEgRGlyZWN0b3JcbmZ1bmN0aW9uIGlzRGlyZWN0b3IoZW1wbG95ZWU6IERpcmVjdG9yIHwgVGVhY2hlcik6IGVtcGxveWVlIGlzIERpcmVjdG9yIHtcbiAgcmV0dXJuIGVtcGxveWVlIGluc3RhbmNlb2YgRGlyZWN0b3I7XG59XG5cbi8vIEZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMgd29yayBiYXNlZCBvbiBlbXBsb3llZSB0eXBlXG5mdW5jdGlvbiBleGVjdXRlV29yayhlbXBsb3llZTogRGlyZWN0b3IgfCBUZWFjaGVyKTogc3RyaW5nIHtcbiAgaWYgKGlzRGlyZWN0b3IoZW1wbG95ZWUpKSB7XG4gICAgcmV0dXJuIGVtcGxveWVlLndvcmtEaXJlY3RvclRhc2tzKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVtcGxveWVlLndvcmtUZWFjaGVyVGFza3MoKTtcbiAgfVxufVxuXG4vLyBUZXN0aW5nIGV4YW1wbGVzIGFzIHNwZWNpZmllZCBpbiB0aGUgcmVxdWlyZW1lbnRzXG5jb25zb2xlLmxvZyhjcmVhdGVFbXBsb3llZSgyMDApKTsgIC8vIFNob3VsZCByZXR1cm4gVGVhY2hlciBpbnN0YW5jZVxuY29uc29sZS5sb2coY3JlYXRlRW1wbG95ZWUoMTAwMCkpOyAvLyBTaG91bGQgcmV0dXJuIERpcmVjdG9yIGluc3RhbmNlXG5jb25zb2xlLmxvZyhjcmVhdGVFbXBsb3llZSgnJDUwMCcpKTsgLy8gU2hvdWxkIHJldHVybiBEaXJlY3RvciBpbnN0YW5jZVxuXG4vLyBBZGRpdGlvbmFsIGV4YW1wbGVzIHRvIGRlbW9uc3RyYXRlIHRoZSBtZXRob2RzXG5jb25zdCB0ZWFjaGVyID0gY3JlYXRlRW1wbG95ZWUoMjAwKSBhcyBUZWFjaGVyO1xuY29uc29sZS5sb2codGVhY2hlci53b3JrRnJvbUhvbWUoKSk7ICAgICAvLyBcIkNhbm5vdCB3b3JrIGZyb20gaG9tZVwiXG5jb25zb2xlLmxvZyh0ZWFjaGVyLmdldENvZmZlZUJyZWFrKCkpOyAgIC8vIFwiQ2Fubm90IGhhdmUgYSBicmVha1wiXG5jb25zb2xlLmxvZyh0ZWFjaGVyLndvcmtUZWFjaGVyVGFza3MoKSk7IC8vIFwiR2V0dGluZyB0byB3b3JrXCJcblxuY29uc3QgZGlyZWN0b3IgPSBjcmVhdGVFbXBsb3llZSgxMDAwKSBhcyBEaXJlY3RvcjtcbmNvbnNvbGUubG9nKGRpcmVjdG9yLndvcmtGcm9tSG9tZSgpKTsgICAgICAvLyBcIldvcmtpbmcgZnJvbSBob21lXCJcbmNvbnNvbGUubG9nKGRpcmVjdG9yLmdldENvZmZlZUJyZWFrKCkpOyAgICAvLyBcIkdldHRpbmcgYSBjb2ZmZWUgYnJlYWtcIlxuY29uc29sZS5sb2coZGlyZWN0b3Iud29ya0RpcmVjdG9yVGFza3MoKSk7IC8vIFwiR2V0dGluZyB0byBkaXJlY3RvciB0YXNrc1wiXG5cbi8vIFRhc2sgNjogVGVzdGluZyB0aGUgbmV3IGZ1bmN0aW9uc1xuY29uc29sZS5sb2coZXhlY3V0ZVdvcmsoY3JlYXRlRW1wbG95ZWUoMjAwKSkpOyAgLy8gXCJHZXR0aW5nIHRvIHdvcmtcIlxuY29uc29sZS5sb2coZXhlY3V0ZVdvcmsoY3JlYXRlRW1wbG95ZWUoMTAwMCkpKTsgLy8gXCJHZXR0aW5nIHRvIGRpcmVjdG9yIHRhc2tzXCIgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9