/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Director class implementing DirectorInterface
var Director = /** @class */ (function () {
    function Director() {
    }
    Director.prototype.workFromHome = function () {
        return "Working from home";
    };
    Director.prototype.getCoffeeBreak = function () {
        return "Getting a coffee break";
    };
    Director.prototype.workDirectorTasks = function () {
        return "Getting to director tasks";
    };
    return Director;
}());
// Teacher class implementing TeacherInterface
var Teacher = /** @class */ (function () {
    function Teacher() {
    }
    Teacher.prototype.workFromHome = function () {
        return "Cannot work from home";
    };
    Teacher.prototype.getCoffeeBreak = function () {
        return "Cannot have a break";
    };
    Teacher.prototype.workTeacherTasks = function () {
        return "Getting to work";
    };
    return Teacher;
}());
// createEmployee function that returns Director or Teacher based on salary
function createEmployee(salary) {
    if (typeof salary === "number" && salary < 500) {
        return new Teacher();
    }
    return new Director();
}
// Task 6: Creating functions specific to employees
// Type predicate function to check if employee is a Director
function isDirector(employee) {
    return employee instanceof Director;
}
// Function that executes work based on employee type
function executeWork(employee) {
    if (isDirector(employee)) {
        return employee.workDirectorTasks();
    }
    else {
        return employee.workTeacherTasks();
    }
}
// Testing examples as specified in the requirements
console.log(createEmployee(200)); // Should return Teacher instance
console.log(createEmployee(1000)); // Should return Director instance
console.log(createEmployee('$500')); // Should return Director instance
// Additional examples to demonstrate the methods
var teacher = createEmployee(200);
console.log(teacher.workFromHome()); // "Cannot work from home"
console.log(teacher.getCoffeeBreak()); // "Cannot have a break"
console.log(teacher.workTeacherTasks()); // "Getting to work"
var director = createEmployee(1000);
console.log(director.workFromHome()); // "Working from home"
console.log(director.getCoffeeBreak()); // "Getting a coffee break"
console.log(director.workDirectorTasks()); // "Getting to director tasks"
// Task 6: Testing the new functions
console.log(executeWork(createEmployee(200))); // "Getting to work"
console.log(executeWork(createEmployee(1000))); // "Getting to director tasks"
// Function that takes a Subjects type and returns appropriate teaching message
function teachClass(todayClass) {
    if (todayClass === 'Math') {
        return 'Teaching Math';
    }
    else {
        return 'Teaching History';
    }
}
// Testing examples as specified in the requirements
console.log(teachClass('Math')); // "Teaching Math"
console.log(teachClass('History')); // "Teaching History"

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsOEJBQThCO0FBTzlFLCtFQUErRTtBQUMvRSxTQUFTLFVBQVUsQ0FBQyxVQUFvQjtJQUN0QyxJQUFJLFVBQVUsS0FBSyxNQUFNLEVBQUU7UUFDekIsT0FBTyxlQUFlLENBQUM7S0FDeEI7U0FBTTtRQUNMLE9BQU8sa0JBQWtCLENBQUM7S0FDM0I7QUFDSCxDQUFDO0FBRUQsb0RBQW9EO0FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBSyxrQkFBa0I7QUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFFLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3R5cGVzY3JpcHRfZGVwZW5kZW5jaWVzLy4vanMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEaXJlY3RvckludGVyZmFjZSB3aXRoIDMgZXhwZWN0ZWQgbWV0aG9kc1xuaW50ZXJmYWNlIERpcmVjdG9ySW50ZXJmYWNlIHtcbiAgd29ya0Zyb21Ib21lKCk6IHN0cmluZztcbiAgZ2V0Q29mZmVlQnJlYWsoKTogc3RyaW5nO1xuICB3b3JrRGlyZWN0b3JUYXNrcygpOiBzdHJpbmc7XG59XG5cbi8vIFRlYWNoZXJJbnRlcmZhY2Ugd2l0aCAzIGV4cGVjdGVkIG1ldGhvZHNcbmludGVyZmFjZSBUZWFjaGVySW50ZXJmYWNlIHtcbiAgd29ya0Zyb21Ib21lKCk6IHN0cmluZztcbiAgZ2V0Q29mZmVlQnJlYWsoKTogc3RyaW5nO1xuICB3b3JrVGVhY2hlclRhc2tzKCk6IHN0cmluZztcbn1cblxuLy8gRGlyZWN0b3IgY2xhc3MgaW1wbGVtZW50aW5nIERpcmVjdG9ySW50ZXJmYWNlXG5jbGFzcyBEaXJlY3RvciBpbXBsZW1lbnRzIERpcmVjdG9ySW50ZXJmYWNlIHtcbiAgd29ya0Zyb21Ib21lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiV29ya2luZyBmcm9tIGhvbWVcIjtcbiAgfVxuXG4gIGdldENvZmZlZUJyZWFrKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiR2V0dGluZyBhIGNvZmZlZSBicmVha1wiO1xuICB9XG5cbiAgd29ya0RpcmVjdG9yVGFza3MoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJHZXR0aW5nIHRvIGRpcmVjdG9yIHRhc2tzXCI7XG4gIH1cbn1cblxuLy8gVGVhY2hlciBjbGFzcyBpbXBsZW1lbnRpbmcgVGVhY2hlckludGVyZmFjZVxuY2xhc3MgVGVhY2hlciBpbXBsZW1lbnRzIFRlYWNoZXJJbnRlcmZhY2Uge1xuICB3b3JrRnJvbUhvbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJDYW5ub3Qgd29yayBmcm9tIGhvbWVcIjtcbiAgfVxuXG4gIGdldENvZmZlZUJyZWFrKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiQ2Fubm90IGhhdmUgYSBicmVha1wiO1xuICB9XG5cbiAgd29ya1RlYWNoZXJUYXNrcygpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIkdldHRpbmcgdG8gd29ya1wiO1xuICB9XG59XG5cbi8vIGNyZWF0ZUVtcGxveWVlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBEaXJlY3RvciBvciBUZWFjaGVyIGJhc2VkIG9uIHNhbGFyeVxuZnVuY3Rpb24gY3JlYXRlRW1wbG95ZWUoc2FsYXJ5OiBudW1iZXIgfCBzdHJpbmcpOiBEaXJlY3RvciB8IFRlYWNoZXIge1xuICBpZiAodHlwZW9mIHNhbGFyeSA9PT0gXCJudW1iZXJcIiAmJiBzYWxhcnkgPCA1MDApIHtcbiAgICByZXR1cm4gbmV3IFRlYWNoZXIoKTtcbiAgfVxuICByZXR1cm4gbmV3IERpcmVjdG9yKCk7XG59XG5cbi8vIFRhc2sgNjogQ3JlYXRpbmcgZnVuY3Rpb25zIHNwZWNpZmljIHRvIGVtcGxveWVlc1xuXG4vLyBUeXBlIHByZWRpY2F0ZSBmdW5jdGlvbiB0byBjaGVjayBpZiBlbXBsb3llZSBpcyBhIERpcmVjdG9yXG5mdW5jdGlvbiBpc0RpcmVjdG9yKGVtcGxveWVlOiBEaXJlY3RvciB8IFRlYWNoZXIpOiBlbXBsb3llZSBpcyBEaXJlY3RvciB7XG4gIHJldHVybiBlbXBsb3llZSBpbnN0YW5jZW9mIERpcmVjdG9yO1xufVxuXG4vLyBGdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHdvcmsgYmFzZWQgb24gZW1wbG95ZWUgdHlwZVxuZnVuY3Rpb24gZXhlY3V0ZVdvcmsoZW1wbG95ZWU6IERpcmVjdG9yIHwgVGVhY2hlcik6IHN0cmluZyB7XG4gIGlmIChpc0RpcmVjdG9yKGVtcGxveWVlKSkge1xuICAgIHJldHVybiBlbXBsb3llZS53b3JrRGlyZWN0b3JUYXNrcygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbXBsb3llZS53b3JrVGVhY2hlclRhc2tzKCk7XG4gIH1cbn1cblxuLy8gVGVzdGluZyBleGFtcGxlcyBhcyBzcGVjaWZpZWQgaW4gdGhlIHJlcXVpcmVtZW50c1xuY29uc29sZS5sb2coY3JlYXRlRW1wbG95ZWUoMjAwKSk7ICAvLyBTaG91bGQgcmV0dXJuIFRlYWNoZXIgaW5zdGFuY2VcbmNvbnNvbGUubG9nKGNyZWF0ZUVtcGxveWVlKDEwMDApKTsgLy8gU2hvdWxkIHJldHVybiBEaXJlY3RvciBpbnN0YW5jZVxuY29uc29sZS5sb2coY3JlYXRlRW1wbG95ZWUoJyQ1MDAnKSk7IC8vIFNob3VsZCByZXR1cm4gRGlyZWN0b3IgaW5zdGFuY2VcblxuLy8gQWRkaXRpb25hbCBleGFtcGxlcyB0byBkZW1vbnN0cmF0ZSB0aGUgbWV0aG9kc1xuY29uc3QgdGVhY2hlciA9IGNyZWF0ZUVtcGxveWVlKDIwMCkgYXMgVGVhY2hlcjtcbmNvbnNvbGUubG9nKHRlYWNoZXIud29ya0Zyb21Ib21lKCkpOyAgICAgLy8gXCJDYW5ub3Qgd29yayBmcm9tIGhvbWVcIlxuY29uc29sZS5sb2codGVhY2hlci5nZXRDb2ZmZWVCcmVhaygpKTsgICAvLyBcIkNhbm5vdCBoYXZlIGEgYnJlYWtcIlxuY29uc29sZS5sb2codGVhY2hlci53b3JrVGVhY2hlclRhc2tzKCkpOyAvLyBcIkdldHRpbmcgdG8gd29ya1wiXG5cbmNvbnN0IGRpcmVjdG9yID0gY3JlYXRlRW1wbG95ZWUoMTAwMCkgYXMgRGlyZWN0b3I7XG5jb25zb2xlLmxvZyhkaXJlY3Rvci53b3JrRnJvbUhvbWUoKSk7ICAgICAgLy8gXCJXb3JraW5nIGZyb20gaG9tZVwiXG5jb25zb2xlLmxvZyhkaXJlY3Rvci5nZXRDb2ZmZWVCcmVhaygpKTsgICAgLy8gXCJHZXR0aW5nIGEgY29mZmVlIGJyZWFrXCJcbmNvbnNvbGUubG9nKGRpcmVjdG9yLndvcmtEaXJlY3RvclRhc2tzKCkpOyAvLyBcIkdldHRpbmcgdG8gZGlyZWN0b3IgdGFza3NcIlxuXG4vLyBUYXNrIDY6IFRlc3RpbmcgdGhlIG5ldyBmdW5jdGlvbnNcbmNvbnNvbGUubG9nKGV4ZWN1dGVXb3JrKGNyZWF0ZUVtcGxveWVlKDIwMCkpKTsgIC8vIFwiR2V0dGluZyB0byB3b3JrXCJcbmNvbnNvbGUubG9nKGV4ZWN1dGVXb3JrKGNyZWF0ZUVtcGxveWVlKDEwMDApKSk7IC8vIFwiR2V0dGluZyB0byBkaXJlY3RvciB0YXNrc1wiXG5cbi8vIFRhc2sgNzogU3RyaW5nIGxpdGVyYWwgdHlwZXNcblxuLy8gU3RyaW5nIGxpdGVyYWwgdHlwZSBhbGxvd2luZyBvbmx5ICdNYXRoJyBvciAnSGlzdG9yeSdcbnR5cGUgU3ViamVjdHMgPSAnTWF0aCcgfCAnSGlzdG9yeSc7XG5cbi8vIEZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBTdWJqZWN0cyB0eXBlIGFuZCByZXR1cm5zIGFwcHJvcHJpYXRlIHRlYWNoaW5nIG1lc3NhZ2VcbmZ1bmN0aW9uIHRlYWNoQ2xhc3ModG9kYXlDbGFzczogU3ViamVjdHMpOiBzdHJpbmcge1xuICBpZiAodG9kYXlDbGFzcyA9PT0gJ01hdGgnKSB7XG4gICAgcmV0dXJuICdUZWFjaGluZyBNYXRoJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ1RlYWNoaW5nIEhpc3RvcnknO1xuICB9XG59XG5cbi8vIFRlc3RpbmcgZXhhbXBsZXMgYXMgc3BlY2lmaWVkIGluIHRoZSByZXF1aXJlbWVudHNcbmNvbnNvbGUubG9nKHRlYWNoQ2xhc3MoJ01hdGgnKSk7ICAgICAvLyBcIlRlYWNoaW5nIE1hdGhcIlxuY29uc29sZS5sb2codGVhY2hDbGFzcygnSGlzdG9yeScpKTsgIC8vIFwiVGVhY2hpbmcgSGlzdG9yeVwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9